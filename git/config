[user]
	email = marlom.girardi@gmail.com
	name = Marlom Girardi
[core]
	editor = vim
	autocrlf = false
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes
	hooksPath = ~/.config/git/hooks
[rerere]
	enabled = 1g
	autoupdate = 1
[fetch]
	prune = true
	pruneTags = true
	# recurseSubmodules = true
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
[pretty]
	singleline = %C(yellow)%h %C(bold green)%d%C(reset) %s %C(245)(%an · %cr)%C(reset)
	multiline = %n%C(240)────────────%+n%C(auto)%H%C(auto)%D%C(reset)%n%C(cyan)%an%C(reset) · %C(green)%cr%C(reset)%n%+B
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[push]
	default = matching
[color]
	ui = true
[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold
[diff]
	tool = vimdff
	guitool = subl -w
[difftool]
	prompt = false
[url "git@github.com:"]
	insteadOf = https://github.com/ # https://ricostacruz.com/til/github-always-ssh
[alias]
	a = add --all
	#############
	# ap = apply
	# as = apply --stat
	# ac = apply --check
	#############
	b = branch
	ba = branch --all
	bd = branch --delete
	bdf = branch --delete --force
	br = branch --remotes

	# Remove merged branches
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# bc = rev-parse --abbrev-ref HEAD
	#############
	# c = commit
	# ca = commit -a
	cm = commit -m
	# cam = commit -am
	# cem = commit --allow-empty -m
	cad = commit --amend
	# ced = commit --allow-empty --amend

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	#############
	cl = clone --recursive
	cld = clone --depth 1
	clg = !sh -c 'git clone git://github.com/$1 $(basename $1)' -
	#############
	# cp = cherry-pick
	# cpa = cherry-pick --abort
	# cpc = cherry-pick --continue
	#############
	# d = diff

	# Show the diff between the latest commit and the current state
	dl = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# dp = diff --patience
	# dc = diff --cached
	# dk = diff --check
	# dck = diff --cached --check
	# dt = difftool
	# dct = difftool --cached
	#############
	f = fetch
	fa = fetch --all --tags
	# fo = fetch origin
	# fu = fetch upstream
	#############
	# fp = format-patch
	#############
	# fk = fsck
	#############
	# g = grep -p
	#############
	# gcn = gc --prune=now
	#############
	l = log --graph --pretty=singleline
	ls = log --numstat --pretty=multiline
	find = !git l | fzf | cut -d ' ' -f1 | xargs -o git show
	#############
	# ls = ls-files
	# lsf = !git ls-files | grep -i
	#############
	# m = merge
	# ma = merge --abort
	# mc = merge --continue
	# ms = merge --skip
	#############
	fco = !git b | grep "^[^*]" | fzf | sed -e 's/^[ ]*//' | xargs -o git checkout
	# fcor = !git b -r | awk '!/->/' | fzf | sed -e 's/^[ ]*//' | xargs -o git checkout

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	#############
	# pr = prune -v
	#############
	ps = push
	psf = push --force
	# psu = push --set-upstream
	# pst = push --tags
	#############
	# pso = push origin
	# psao = push --all origin
	# psfo = push -f origin
	# psuo = push -u origin
	#############
	# psom = push origin master
	# psaom = push --all origin master
	# psfom = push -f origin master
	# psuom = push -u origin master
	# psoc = !git push origin $(git bc)
	# psaoc = !git push --all origin $(git bc)
	# psfoc = !git push -f origin $(git bc)
	# psuoc = !git push -u origin $(git bc)
	# psdc = !git push origin :$(git bc)
	#############
	pl = pull
	pb = pull --rebase
	#############
	# plo = pull origin
	# pbo = pull --rebase origin
	# plom = pull origin master
	# ploc = !git pull origin $(git bc)
	# pbom = pull --rebase origin master
	# pboc = !git pull --rebase origin $(git bc)
	#############
	# plu = pull upstream
	# plum = pull upstream master
	# pluc = !git pull upstream $(git bc)
	# pbum = pull --rebase upstream master
	# pbuc = !git pull --rebase upstream $(git bc)
	#############
	rb = rebase
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive
	rbs = rebase --skip
	#############
	# rleu = reflog expire --expire-unreachable=now --all
	#############
	# re = reset
	# rh = reset HEAD
	# reh = reset --hard
	# rem = reset --mixed
	# res = reset --soft
	# rehh = reset --hard HEAD
	# remh = reset --mixed HEAD
	# resh = reset --soft HEAD
	#############
	# r = remote
	# ra = remote add
	# rr = remote rm
	# rv = remote -v
	# rn = remote rename
	# rp = remote prune
	# rs = remote show
	# rao = remote add origin
	# rau = remote add upstream
	# rro = remote remove origin
	# rru = remote remove upstream
	# rso = remote show origin
	# rsu = remote show upstream
	# rpo = remote prune origin
	# rpu = remote prune upstream
	#############
	# rmf = rm -f
	# rmrf = rm -r -f
	#############
	s = status -sb
	#############
	# sa = stash apply
	# sc = stash clear
	# sd = stash drop
	sl = stash list
	sp = stash pop
	ss = stash save
	# sw = stash show
	#############
	# w = show
	# wp = show -p
	# wr = show -p --no-color
	#############
	# svnr = svn rebase
	# svnd = svn dcommit
	# svnl = svn log --oneline --show-commit
	#############
	# sm = submodule
	# sma = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' -
	# smu = submodule update --init --recursive
	# smp = !git submodule foreach git pull --tags origin master
	#############
	# assume = update-index --assume-unchanged
	# unassume = update-index --no-assume-unchanged
	# assumed = !git ls -v | grep ^h | cut -c 3-
	# unassumeall = !git assumed | xargs git unassume
	# assumeall = !git status -s | awk {'print $2'} | xargs git assume
	#############
	# bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
	# release = !sh -c 'git tag v$1 && git pst' -
	# unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
	# aliases = !git config -l | grep alias | cut -c 7-
	# snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
	# bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
	# whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' -
	# serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
	#############
	# ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	# theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
	# subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
	# human = name-rev --name-only --refs=refs/heads/*
	#############
	# w  = whatchanged --decorate
	# wp = whatchanged --decorate -p
	#############
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
